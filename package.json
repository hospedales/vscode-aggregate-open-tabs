{
  "name": "vscode-aggregate-open-tabs",
  "author": "Michael Hospedales",
  "homepage": "https://github.com/hospedales/vscode-aggregate-open-tabs",
  "displayName": "Aggregate Open Tabs",
  "description": "Collects code from all currently open tabs and combines it into one file",
  "version": "0.1.0",
  "engines": {
    "vscode": "^1.74.0"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onView:aggregateOpenTabsView",
    "onCommand:extension.aggregateOpenTabs",
    "onCommand:extension.selectiveAggregate",
    "onCommand:extension.togglePreview",
    "onCommand:extension.copyAggregatedContent",
    "onCommand:extension.openConfiguration",
    "onCommand:extension.refreshAggregateView"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "viewsContainers": {
      "activitybar": [
        {
          "id": "aggregate-open-tabs",
          "title": "Aggregate Open Tabs",
          "icon": "media/icon.svg"
        }
      ]
    },
    "views": {
      "aggregate-open-tabs": [
        {
          "id": "aggregateOpenTabsView",
          "name": "Aggregate Files",
          "type": "tree",
          "dragAndDropController": "aggregateOpenTabsView"
        }
      ]
    },
    "commands": [
      {
        "command": "extension.aggregateOpenTabs",
        "title": "Aggregate Open Tabs into One File"
      },
      {
        "command": "extension.refreshAggregateView",
        "title": "Refresh",
        "icon": "$(refresh)"
      },
      {
        "command": "extension.selectiveAggregate",
        "title": "Selectively Aggregate Open Tabs"
      },
      {
        "command": "extension.copyAggregatedContent",
        "title": "Copy Aggregated Content to Clipboard"
      },
      {
        "command": "extension.openInNewWindow",
        "title": "Open Aggregated File in New Window"
      },
      {
        "command": "extension.uploadToGist",
        "title": "Upload Aggregated Content to GitHub Gist"
      },
      {
        "command": "extension.saveSnapshot",
        "title": "Save Current Aggregation as Snapshot"
      },
      {
        "command": "extension.loadSnapshot",
        "title": "Load Previous Aggregation Snapshot"
      },
      {
        "command": "extension.togglePreview",
        "title": "Toggle Aggregation Preview",
        "icon": "$(preview)"
      },
      {
        "command": "extension.openConfiguration",
        "title": "Open Aggregate Open Tabs Configuration",
        "icon": "$(gear)"
      }
    ],
    "menus": {
      "view/title": [
        {
          "command": "extension.refreshAggregateView",
          "when": "view == aggregateOpenTabsView",
          "group": "navigation"
        },
        {
          "command": "extension.openConfiguration",
          "when": "view == aggregateOpenTabsView",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "extension.copyAggregatedContent",
          "when": "viewItem == aggregatedFile",
          "group": "inline"
        },
        {
          "command": "extension.openInNewWindow",
          "when": "viewItem == aggregatedFile",
          "group": "inline"
        },
        {
          "command": "extension.uploadToGist",
          "when": "viewItem == aggregatedFile",
          "group": "inline"
        }
      ]
    },
    "configuration": {
      "title": "Aggregate Open Tabs",
      "properties": {
        "aggregateOpenTabs.fileSeparatorFormat": {
          "type": "string",
          "default": "//=============================================================================\n// File: {fileName}\n//=============================================================================",
          "description": "Format of the separator between files. Use {fileName} as a placeholder for the file name."
        },
        "aggregateOpenTabs.autoSave": {
          "type": "boolean",
          "default": false,
          "description": "Automatically save the aggregated file."
        },
        "aggregateOpenTabs.autoSavePath": {
          "type": "string",
          "default": "",
          "description": "Path where aggregated files will be saved if autoSave is enabled. Leave empty to save in the workspace root."
        },
        "aggregateOpenTabs.includeFileTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "List of file extensions to include (e.g., [\".ts\", \".js\"]). Leave empty [] or set to [\"*\"] to include all file types.",
          "examples": [
            [],
            [
              "*"
            ],
            [
              ".ts",
              ".js",
              ".tsx"
            ],
            [
              ".py",
              ".ipynb"
            ],
            [
              ".java",
              ".kt"
            ]
          ]
        },
        "aggregateOpenTabs.chunkSize": {
          "type": "number",
          "default": 2000,
          "description": "Maximum number of lines per chunk when splitting large files. Set to 0 to disable chunking."
        },
        "aggregateOpenTabs.excludePatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [
            "**/*.env",
            "**/*.lock",
            "**/node_modules/**"
          ],
          "description": "Glob patterns for files to exclude from aggregation."
        },
        "aggregateOpenTabs.addSummaries": {
          "type": "boolean",
          "default": true,
          "description": "Add short summaries for each file in the aggregated output."
        },
        "aggregateOpenTabs.openInNewWindow": {
          "type": "boolean",
          "default": false,
          "description": "Open aggregated file in a new VS Code window by default."
        },
        "aggregateOpenTabs.sensitiveDataHandling": {
          "type": "string",
          "enum": [
            "warn",
            "redact",
            "skip",
            "ignore"
          ],
          "default": "warn",
          "description": "How to handle potentially sensitive data (API keys, passwords, etc.)"
        },
        "aggregateOpenTabs.customRedactionPatterns": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "default": [],
          "description": "Additional regex patterns to detect sensitive data."
        },
        "aggregateOpenTabs.outputFormat": {
          "type": "string",
          "enum": [
            "plaintext",
            "markdown",
            "html"
          ],
          "default": "plaintext",
          "description": "Format of the aggregated output."
        },
        "aggregateOpenTabs.keepSnapshots": {
          "type": "boolean",
          "default": true,
          "description": "Keep historical snapshots of aggregated content."
        },
        "aggregateOpenTabs.maxSnapshots": {
          "type": "number",
          "default": 10,
          "description": "Maximum number of historical snapshots to keep."
        },
        "aggregateOpenTabs.githubGistToken": {
          "type": "string",
          "default": "",
          "description": "GitHub personal access token for Gist creation (optional)."
        },
        "aggregateOpenTabs.enhancedSummaries": {
          "type": "boolean",
          "default": true,
          "description": "Generate detailed summaries including framework detection, file purpose, and AI analysis."
        },
        "aggregateOpenTabs.extraSpacing": {
          "type": "boolean",
          "default": true,
          "description": "Add extra blank lines around code blocks and sections for better readability."
        },
        "aggregateOpenTabs.codeFenceLanguageMap": {
          "type": "object",
          "default": {
            "typescriptreact": "tsx",
            "javascriptreact": "jsx",
            "typescript": "ts",
            "javascript": "js",
            "markdown": "md",
            "plaintext": "text"
          },
          "description": "Map of VS Code language IDs to code fence language identifiers for Markdown output."
        },
        "aggregateOpenTabs.useCodeFences": {
          "type": "boolean",
          "default": true,
          "description": "Wrap code blocks in language-specific code fences (e.g. ```typescript) for better syntax highlighting in Markdown-aware contexts."
        },
        "aggregateOpenTabs.chunkSeparatorStyle": {
          "type": "string",
          "enum": ["double", "single", "minimal"],
          "default": "double",
          "description": "Style of chunk separators: double (=====), single (-----), or minimal (--)."
        },
        "aggregateOpenTabs.tailoredSummaries": {
          "type": "boolean",
          "default": true,
          "description": "Generate unique summaries for each file instead of using generic descriptions."
        },
        "aggregateOpenTabs.includeKeyPoints": {
          "type": "boolean",
          "default": true,
          "description": "Include key points in the AI analysis section."
        },
        "aggregateOpenTabs.includeAISummaries": {
          "type": "boolean",
          "default": true,
          "description": "Include AI-generated summaries and key points for each file."
        },
        "aggregateOpenTabs.aiSummaryStyle": {
          "type": "string",
          "enum": [
            "minimal",
            "basic",
            "standard",
            "detailed",
            "comprehensive"
          ],
          "default": "standard",
          "description": "Depth of AI-generated summaries (minimal: purpose only, basic: purpose + main features, standard: balanced analysis, detailed: full analysis, comprehensive: exhaustive analysis)."
        },
        "aggregateOpenTabs.includeImports": {
          "type": "boolean",
          "default": true,
          "description": "Include import statements in file summaries."
        },
        "aggregateOpenTabs.showPreviewOnStartup": {
          "type": "boolean",
          "default": false,
          "description": "Show the aggregation preview panel when the extension starts."
        },
        "aggregateOpenTabs.includeCrossReferences": {
          "type": "boolean",
          "default": true,
          "description": "Include cross-references between files in the output (imports, exports, dependencies)."
        },
        "aggregateOpenTabs.preview.showSourceView": {
          "type": "boolean",
          "default": false,
          "description": "Show source view alongside the preview"
        },
        "aggregateOpenTabs.preview.syntaxHighlighting": {
          "type": "boolean",
          "default": true,
          "description": "Enable syntax highlighting in the preview"
        },
        "aggregateOpenTabs.preview.collapsibleSections": {
          "type": "boolean",
          "default": true,
          "description": "Enable collapsible sections in the preview"
        },
        "aggregateOpenTabs.preview.searchEnabled": {
          "type": "boolean",
          "default": true,
          "description": "Enable search functionality in the preview"
        },
        "aggregateOpenTabs.preview.autoRefresh": {
          "type": "boolean",
          "default": true,
          "description": "Automatically refresh preview when files change"
        },
        "aggregateOpenTabs.cacheMemoryLimitMB": {
          "type": "number",
          "default": 100,
          "minimum": 10,
          "maximum": 1000,
          "description": "Maximum memory limit for caching analyzed files (in MB)"
        },
        "aggregateOpenTabs.enableProgressIndicators": {
          "type": "boolean",
          "default": true,
          "description": "Show progress indicators during file analysis and aggregation"
        },
        "aggregateOpenTabs.enableLazyLoading": {
          "type": "boolean",
          "default": true,
          "description": "Enable lazy loading for large file content"
        },
        "aggregateOpenTabs.largeFileThresholdKB": {
          "type": "number",
          "default": 500,
          "minimum": 100,
          "maximum": 5000,
          "description": "File size threshold (in KB) above which lazy loading is triggered"
        }
      }
    }
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "pretest": "npm run compile && npm run lint",
    "lint": "eslint src --ext ts",
    "test": "node ./out/test/runTest.js"
  },
  "devDependencies": {
    "@types/minimatch": "^5.1.2",
    "@types/mocha": "^10.0.6",
    "@types/node": "^20.10.6",
    "@types/vscode": "^1.74.0",
    "@typescript-eslint/eslint-plugin": "^6.18.0",
    "@typescript-eslint/parser": "^6.18.0",
    "eslint": "^8.56.0",
    "mocha": "^10.2.0",
    "minimatch": "^9.0.3",
    "node-fetch": "^2.7.0",
    "ts-mockito": "^2.6.1",
    "typescript": "^5.3.3"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hospedales/vscode-aggregate-open-tabs.git"
  },
  "publisher": "hospedales",
  "dependencies": {
    "@types/node-fetch": "^2.6.12",
    "node-fetch": "^2.7.0"
  }
}
